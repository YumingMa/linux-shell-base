#!/usr/bin/env bash
# 
# Send an sms using an Android device.
# 
# Usage:
#   sms <phone no.> <message>
# 
#   <message> may contain "\n" for newlines.
# 

# ======= CONFIGURATIONS ======================

# X and Y coordiantes of the Send button in the Messaging app. (It is used only
# if needed to ensure the message was sent, not as the primary method).
readonly MSG_SEND_BTN_X_Y='661 1226'

# ======= ! CONFIGURATIONS ======================

if [ $# -lt 2 ]; then
  echo 'sms: invalid number of arguments' 1>&2
  exit 1
fi

PHONE_NO="${1}"
shift
MESSAGE="$(echo "${@}" | sed 's/\\n/${NL}/g')"

# Screen must be on for an sms to be sent using this method
isScreenOn="$(adb -d shell 'dumpsys power' | grep mScreenOn)"
if [[ "${isScreenOn##*=}" = *'false'* ]]; then
  adb -d shell 'input keyevent KEYCODE_POWER;'
fi

adb -d shell "NL=$'\n' ; am start -a android.intent.action.SENDTO -d \
    sms:${PHONE_NO} --es sms_body \"${MESSAGE}\" --ez exit_on_sent true; \
    input keyevent 66" >/dev/null

# Sometimes, the message doesn't get pressed after it has been inserted. The
# following checks if the messaging application is still open and manually
# presses the send button if so.
currPkg="$(adb -d shell dumpsys window windows | grep mCurrentFocus | \
    cut -d'/' -f1 | rev | cut -d' ' -f1 | rev)"
if [ "${currPkg}" != 'com.android.mms' ]; then
  sleep .7
  adb -d shell "input tap ${MSG_SEND_BTN_X_Y}; input keyevent KEYCODE_HOME"
fi
