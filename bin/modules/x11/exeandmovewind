#!/usr/bin/env bash
# 
# Execute a command that opens a window and run an action for the window.
# 
# Dependencies:
#   wmctrl
# 
# Notes:
#   If this module is used with a command that uses quotes, the quotes must be
#   within outer quotes to be interpreted.
#   E.g.
#     $ <command> --opt="opt_arg"
#     #   would have to be
#     $ <command> --opt='"opt_arg"'
# 

# ======= CONFIGURATIONS ======================

# Window move action function; it receives the window ID as a hexidecimal and
# the window title if the --title option was used.
WIND_MOVE_ACTION() {
  { [ -z "${WIND_TITLE}" ] && local idOrTitle="${1}" && local iopt='-i'; } || \
      local idOrTitle="${WIND_TITLE}"

  # Create custom window action below

  wmctrl ${iopt} -r "${idOrTitle}" -b remove,maximized_vert,maximized_horz
  wmctrl ${iopt} -r "${idOrTitle}" -b remove,maximized_vert,maximized_horz
  wmctrl ${iopt} -r "${idOrTitle}" -e 0,50,50,800,800
  wmctrl ${iopt} -r "${idOrTitle}" -b add,maximized_vert,maximized_horz
}

# ======= ! CONFIGURATIONS ======================

printHelpMessage() {
if [ "${1}" = 'full' ]; then
  echo "Execute a command and run an action on the resulting window."
fi
echo -ne "
Usage: exeandmovewind [options] -- <command> <window class>
         <delay time(sec)>

  command:          command to run
  window class:     class of the window that is opened by the
                    command (only used to check if the window
                    is already open; no action will be taken
                    if so)
  delay time(sec):  time required for the window to open before
                    moving it (min: .1; max: 25)

Options:
  -t --title <TITLE>  specify the window title to use in case the returned PID
                      isn't matching that of the executed command; this will
                      override using the PID.
  -g --geometry       geometry to use for positioning the window (instead of
                      using the window action); format: X,Y,WIDTH,HEIGHT
  --pre-execute       command to pre-execute (sometimes needed, e.g., when
                      having to cd to a directory first)
  -h --help           help message
"
}

OPTS="$(getopt -o t:,g:,h --long title:,geometry:,pre-execute:,help -n \
    'exeandmovewind' -- "${@}")"
[ $? -ne 0 ] && echo "exiting..." 1>&2 && exit 1
eval set -- "${OPTS}"
while true; do
  case "${1}" in
    --title|-t) WIND_TITLE="${2}"; shift;;
    --geometry|-g)
      if [[ ! "${2}" =~ [0-9]*,[0-9]*,[0-9]*,[0-9] ]]; then
        echo -e 'exeandmovewind: geometry not in correct format' 1>&2
        printHelpMessage
        exit 1
      else
        GEOMETRY="${2}"
        shift
      fi;;
    --pre-execute) PRE_EXEC_CMD="${2}"; shift;;
    --help|-h) printHelpMessage full; exit;;
    --) shift; break;;
    * ) break;;
  esac
  shift
done

if [ "$#" -eq 0 ]; then
  echo -e 'exeandmovewind: no arguments' 1>&2
  printHelpMessage
  exit 1
elif [ "$#" -lt 3 ]; then
  echo -e 'exeandmovewind: invalid number of arguments' 1>&2
  printHelpMessage
  exit 1
else
  # must get all arguments before last two because if the command contains
  # "${@}" (e.g. exeandmo.. "/usr/bin/vim ${@}" <class> [..]), then /usr/bin/vim
  # and the arguments in "${@}"  will be interpreted as separate arguments.
  COMMAND="${@:1:$(($#-2))}"
  WIND_CLASS="${@: -2:1}"
  DELAY_TIME_BFR_MOVE="${@: -1:1}"
fi

if [[ ${DELAY_TIME_BFR_MOVE} =~ ('.'*)([0-9]*) ]]; then
  if [[ -z ${BASH_REMATCH[1]} && ${BASH_REMATCH[2]} -gt 25 ]]; then
    echo -e 'exeandmovewind: delay time invalid: should not\n  be greater than'\
        '25' 1>&2
    exit 1
  fi
else
  echo -e 'exeandmovewind: delay time invalid: leading decimal\n  and numbers'\
      'allowed only' 1>&2
  exit 1
fi

iswindopen() {
  CLASS_WIND_IDS=($(wmctrl -lx | awk -v class="${1}" '$3 ~ class {print $1}'))
  [[ "${#CLASS_WIND_IDS[@]}" -gt 0 ]] && return 0 || return 1
}

getwindidbypid() {
  while IFS= read line; do
    if [[ "${line}" =~ (0x)([0-9a-z]+)([ ][- ][0-9]+[ ])([0-9]*) ]]; then
      winId="${BASH_REMATCH[1]}${BASH_REMATCH[2]}"
      pid="${BASH_REMATCH[4]}"
      if [ "${pid}" -eq "${1}" ]; then
        echo "${winId}"
        break
      fi
    fi
  done < <(wmctrl -lp)
}

if iswindopen "${WIND_CLASS}"; then
  ALREADY_OPENED=true
fi

if [ -n "${PRE_EXEC_CMD}" ]; then
  ${PRE_EXEC_CMD} # do not quote
fi

# Do not quote ${COMMAND} because if the command's arguments contain newlines,
# the text on each newline will be interpreted as an individual command.
eval ${COMMAND}
PID=$!

if [[ -n "${PID}" && ! "${ALREADY_OPENED}" = true ]]; then
  sleep "${DELAY_TIME_BFR_MOVE}"

  [ -z "${WIND_TITLE}" ] && windId="$(getwindidbypid "${PID}")"

  if [[ -n "${windId}" || -n "${WIND_TITLE}" ]]; then
    if [ -n "${GEOMETRY}" ]; then
      { [ -z "${WIND_TITLE}" ] && idOrTitle="${windId}" && iopt='-i'; } || \
          idOrTitle="${WIND_TITLE}"
      wmctrl ${iopt} -r "${idOrTitle}" -e "0,${GEOMETRY}" &
    else
      WIND_MOVE_ACTION "${windId}" &
    fi
  fi
fi
