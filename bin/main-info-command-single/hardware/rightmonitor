#!/usr/bin/env bash
# 
# Determine if a right monitor is enabled (i.e. a monitor positioned to the
# right of the leftmost monitor).
# 
# Exit codes:
#   0: is enabled
#   1: is not enabled
# 
# If enabled, the monitor type will also be printed (e.g. "DP", "HDMI", "VGA",
# "TV", "DVI1", "LVDS").
# 
# Options:
#   -o   output offset/starting position of right monitor also (return string
#        will be in the format "<type>,<offset>").
# 
# Notes:
#   Monitors after the second will be ignored.
# 
#   If more than one monitor is enabled, the right monitor is considered the one
#   with the lowest non-zero X offset. The left monitor is always the first one
#   with a zero X offset.
# 

while getopts :o OPT; do
  case "${OPT}" in
    o) OUTPUT_OFFSET=true;;
    \?) echo "rightmonitor: option \"${OPTARG}\" unknown" 1>&2; exit 1;;
  esac
done
shift $((OPTIND - 1))

IFS=$'\n'
xrandrMntrs=($(xrandr --query | grep ' connected'))
unset IFS

if [ "${#xrandrMntrs[@]}" -ge 2 ]; then
  for xrandrMntr in "${xrandrMntrs[@]}"; do
    vals=($(echo "${xrandrMntr}" | perl -ne \
        'm/([^ ]+) connected (?:primary )?[^+]+\+(\d+).*/; print "$1 $2"'))

    if [ "${#vals[@]}" -eq 2 ]; then
      mntrType="${vals[0]}"
      offst="${vals[1]}"

      if [[ "${offst}" -gt 0 && (-z "${lwstNonZeroOffst}" || "${offst}" -lt \
          "${lwstNonZeroOffst}") ]]; then
        RIGHT_MONITOR_TYPE="${vals[0]}"
        RIGHT_MONITOR_OFFST="${vals[1]}"
        lwstNonZeroOffst="${offst}"
      fi
    fi
  done

  if [ -n "${RIGHT_MONITOR_TYPE}" ]; then
    retStr="${RIGHT_MONITOR_TYPE}"

    if [ "${OUTPUT_OFFSET}" = 'true' ]; then
      retStr+=",${RIGHT_MONITOR_OFFST}"
    fi

    echo "${retStr}"
    exit 0
  else
    exit 1
  fi
else
  exit 1
fi
