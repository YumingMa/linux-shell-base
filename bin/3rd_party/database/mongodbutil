#!/usr/bin/env bash
# 
# Utility script for general MongoDB tasks.
# 
# Usage
#   mongodbutil <action> [action arguments]
# 

readonly ACTION="${1}"
readonly DB_NAME="${2}"

if [ "$#" -lt 1 ]; then
  echo "mongodbutil: no action specified" 1>&2
  exit 1
fi

shift

dbNotSpecified() {
  if [ -z "${DB_NAME}" ]; then
    echo "mongodbutil: no database specified" 1>&2
    return 1
  fi
}

case "${ACTION}" in
  # Import data from JSON file
  # Arguments:
  #   1. JSON file name
  #   2. (Optional) Name for the collection; default is JSON file name
  'import')
    if dbNotSpecified; then exit 1; else shift; fi
    if [ "$#" -lt 1 ]; then
      echo "mongodbutil: no directory specified" 1>&2
      exit 1
    elif [ ! -f "${1}" ]; then
      echo "mongodbutil: cannot import: file \"${1}\" does not exist" 1>&2
      exit 1
    fi

    if [ -n "${2}" ]; then
      addtArgs+="--collection ${2}"
    fi

    mongoimport --db "${DB_NAME}" --file "${1}" ${addtArgs} --jsonArray
    ;;

  # Export data to JSON file
  # Arguments:
  #   1. Collection name (also used as the name for the JSON file)
  #   2. (Optional) Directory where JSON file should be saved; default is
  #      current
  'export')
    if dbNotSpecified; then exit 1; else shift; fi

    if [ -n "${1}" ]; then
      collName="${1}"
      addtArgs+="--collection ${collName}"
    fi
    if [ -n "${2}" ]; then
      addtArgs+=" --out ${2}/${collName}.json"
    else
      addtArgs+=" --out ${collName}.json"
    fi

    mongoexport --db "${DB_NAME}" ${addtArgs}
    ;;

  # Restore data from BSON files generated with mongodump
  # Arguments:
  #   1. Directory or file containing the exported data
  'restore')
    if dbNotSpecified; then exit 1; else shift; fi

    if [ -z "${1}" ]; then
      echo "mongodbutil: no directory specified"  1>&2
      exit 1
    elif [ ! -d "${1}" ]; then
      echo "mongodbutil: directory \"${1}\" does not exist"  1>&2
      exit 1
    fi

    mongorestore "${1}"
    ;;

  # Dump database (uses BSON files in contrast to export which uses JSON)
  # Arguments:
	#   1. (Optional) Directory where mongodump will write the BSON files;
	#      default is current
  #   2. (Optional) Database collection to dump; default is all
  'dump')
    if dbNotSpecified; then exit 1; else shift; fi

    if [ -n "${1}" ]; then
      addtArgs="--out ${1}"
    fi
    if [ -n "${2}" ]; then
      addtArgs+=" --collection ${2}"
    fi

    mongodump --db "${DB_NAME}" ${addtArgs})
    ;;

  # Drop a database
  # Arguments:
  #   1. Database name
  'drop')
    if dbNotSpecified; then exit 1; else shift; fi

    mongo "${DB_NAME}" --eval 'db.dropDatabase()'
    ;;

  # Drop all databases
  'dropall')
		/usr/bin/mongo <<-EOF
			db.getMongo().getDBNames().forEach(function(database) {
					if (database != 'local' && database != 'admin') {
						db = db.getMongo().getDB(database);
						db.dropDatabase();
						print('dropped database ' + db.getName());
					}
				})
		EOF
    ;;

  # Prints info for all databases
  # Arguments:
	#   1. (Optional) Database name; default is all
  'info')
    if [ -n "${1}" ]; then
      dbName="${1}"
    fi

		/usr/bin/mongo --eval "var param1='${dbName}'" --shell <<-EOF
			db = db.getSiblingDB('admin');
			dbs = db.getMongo().getDBNames();

			if (param1) {
				dbs = JSON.parse('[ ' + JSON.stringify(param1) + ' ]');
			}

			print('\nDatabase collections and counts:');
			for (var i = 0; i < dbs.length; i++) {
				db = db.getSiblingDB(dbs[i]);
				print('  ' + dbs[i]);
				cols = db.getCollectionNames();
				cols.forEach(function(collection) {
					col = db.getCollection(collection);
					print('    ' + collection + ': ' + col.count());
				});
			}
			print();
		EOF
    ;;

  *)
    echo "mongodbutil: unknown action \"${ACTION}\"" 1>&2
    exit 1
    ;;

esac








# DOCUMENTATION
# ================================================
# ~~The following link provides a table that maps the most common mongo shell
#   helpers to their JavaScript equivalents which can be used
#   outside the mongo shell.
# https://docs.mongodb.org/manual/tutorial/write-scripts-for-the-mongo-shell/#differences-between-interactive-and-scripted-mongo
