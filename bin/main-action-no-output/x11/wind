#!/usr/bin/env bash
# 
# Perform one of multiple window actions.
# 
# Dependencies:
#   wmctrl
#   xdotool
# 
# Notes:
#   A window's class name can be retrieved with "wmctrl -lx" (it will be in the
#   form "<class>.<classname>"). It can also be retrieved with the
#   "getactvwindclass" script in linux-shell-base.
# 

printHelpMessage() {
  [ "${1}" = 'full' ] && echo -e 'wind: Perform one of multiple window'\
      'actions.\n'
  echo -e "\
Usage
  wind <action> <window ID or name>

  The window ID must be in hexidecimal format.

  Use \"active\" as the window name to use the
  active window.

Options
  -c --class <CLASS>   match only windows in the
                       class(es) matched by CLASS
                       (case-sensitive)
  -a      perform action on all matching windows
          instead of just the first
  -s      print all window actions
  -h      print help message\
"
}

printActions() {
  echo -e "Window actions:
  close                close
  minimize             minimize
  maximize             maximize
  unmaximize           unmaximize
  maximize-toggle      toggle maximize
  move-screen-left     move to left monitor (if second
                       monitor is enabled)
  move-screen-right    move to right monitor (if second
                       monitor is enabled)
  move-wrkspc-1        move to workspace 1
  move-wrkspc-2        move to workspace 2
  move-wrkspc-3        move to workspace 3
  move-wrkspc-4        move to workspace 4"
}

OPTS="$(getopt -o c:,a,s,h --long class:,all,actions,help -n 'wind' -- "${@}")"
[ $? -ne 0 ] && exit 1
eval set -- "${OPTS}"
while true; do
  case "${1}" in
    --class|-c) OPT_CLASS="${2}"; shift;;
    --all|-a) OPT_ALL=true;;
    --actions|-s) printActions; exit;;
    --help|-h) printHelpMessage full; exit;;
    --) shift; break;;
    *) break;;
  esac
  shift
done

if [ $# -lt 2 ]; then
  printHelpMessage
  [ $# -eq 0 ] && { echo; printActions; }
  exit 1
fi

getactvwindid() {
  echo "$(xprop -root _NET_ACTIVE_WINDOW | cut -d ' ' -f 5 | rev | cut -c \
      2- | rev | sed 's/^0x/0x0/')"
}

getwindclassbyid() {
  echo "$(xprop -id "${1}" WM_OPT_CLASS | sed -n \
      's/[^"]*"\([^"]*\)",\s"\([^"]*\)"/\1.\2/p')"
}

getwindclassbyname() {
  windClsses=("$(wmctrl -lx | awk -v srchTxt="${1}" '{$1=$2=$4=""; wn = \
      gensub(/([^ ]+[ ]+)(.*)/, "\\2", "g", $0); gsub(/ /, "", wn)} wn ~ \
      srchTxt {print $3}' | sort | uniq)")
  echo "${windClsses[0]}"
}

getwindidbyname() {
  [ $# -eq 0 ] && return
  windIds=("$(wmctrl -l | awk -v srchTxt="${1}" '{$2=$3=""; wn = \
      gensub(/([^ ]*[ ]+)(.*)/, "\\2", "g", $0)} wn ~ srchTxt {print $1}')")
  echo "${windIds[@]}"
}

ACTION="${1}"
if [ "${2}" = 'active' ]; then
  WINDOW="$(getactvwindid)"
else
  WINDOW="${2}"
fi

if [ -n "${OPT_CLASS}" ]; then
  if [[ "${WINDOW}" =~ '0x'.* ]]; then
    windClss="$(getwindclassbyid "${WINDOW}")"
  else
    windClss="$(getwindclassbyname "${WINDOW}")"
  fi

  if [[ -z "${windClss}" || "${windClss}" != *"${OPT_CLASS}"* ]]; then
    exit
  fi
fi

if [[ "${WINDOW}" =~ '0x'.* ]]; then
  WINDOW_IDS=("${WINDOW}")
else
  # Exit if the window name is empty or "Desktop" as it will alter the desktop
  # in the Xfce desktop environment, and possibly others.
  if [[ -z "${WINDOW}" || "${WINDOW}" = 'Desktop' ]]; then
    exit 1
  fi

  WINDOW_IDS=($(getwindidbyname "${WINDOW}"))

  if [ "${OPT_ALL}" != 'true' ]; then
    WINDOW_IDS=(${WINDOW_IDS[0]})
  fi
fi

# Utility function to determine if a right monitor is enabled and to set its
# width and offset if so.
rightmonitor() {
  if [ -z "${RGHT_MNTR_WIDTH}" ]; then
    IFS=$'\n'
    xrandrMntrs=($(xrandr --query | grep ' connected'))
    unset IFS

    if [ "${#xrandrMntrs[@]}" -ge 2 ]; then
      for xrandrMntr in "${xrandrMntrs[@]}"; do
        local vals=($(echo "${xrandrMntr}" | perl -ne \
            'm/[^ ]+ connected (?:primary )?([0-9]+)[^+]+\+(\d+).*/; \
            print "$1 $2"'))

        if [ "${#vals[@]}" -eq 2 ]; then
          local wdth="${vals[0]}"
          local offst="${vals[1]}"

          if [[ "${offst}" -gt 0 && (-z "${lwstNonZeroOffst}" || "${offst}" \
              -lt "${lwstNonZeroOffst}") ]]; then
            lwstNonZeroOffst="${offst}"
            RGHT_MNTR_WIDTH="${wdth}"
            RGHT_MNTR_OFFST="${offst}"
          fi
        fi
      done
    fi
  fi

  [ -z "${RGHT_MNTR_WIDTH}" ] && return 1 || return 0
}

# Utility function to retrieve the current window's properties.
setCurrentWindowProperties() {
  xwininfoOut="$(xwininfo -id "${1}")"
  CURR_WIND_X_POS="$(echo "${xwininfoOut}" | grep 'Absolute upper-left X' | \
      awk '{print $4}')"
  CURR_WIND_Y_POS="$(echo "${xwininfoOut}" | grep 'Absolute upper-left Y' | \
      awk '{print $4}')"
  CURR_WIND_WIDTH="$(echo "${xwininfoOut}" | grep Width | awk '{print $2}')"
  CURR_WIND_HEIGHT="$(echo "${xwininfoOut}" | grep Height | awk '{print $2}')"
  CURR_WIND_X_POS_END=$((CURR_WIND_X_POS + CURR_WIND_WIDTH))
}

# =================================================================
#   Process Window Action
# =================================================================

for windId in "${WINDOW_IDS[@]}"; do
  case "${ACTION}" in
    'close')
      wmctrl -i -c "${windId}"
      ;;
    'minimize')
      windIdFrmtd="${windId#*'0x'}"
      dec=$((16#"${windIdFrmtd}"))
      xdotool windowminimize "${dec}"
      ;;
    'maximize')
      wmctrl -i -r "${windId}" -b add,maximized_vert,maximized_horz
      ;;
    'unmaximize')
      wmctrl -i -r "${windId}" -b remove,maximized_vert,maximized_horz
      ;;
    'maximize-toggle')
      wmctrl -i -r "${windId}" -b toggle,maximized_vert,maximized_horz
      ;;
    'move-screen-left')
      if rightmonitor; then
        setCurrentWindowProperties "${windId}"
        if [[ "${CURR_WIND_X_POS_END}" -gt "${RGHT_MNTR_OFFST}" ]]; then
          diff=$((CURR_WIND_X_POS_END - RGHT_MNTR_OFFST))
          [ "${diff}" -gt "${RGHT_MNTR_OFFST}" ] && \
              newXPos=$((RGHT_MNTR_OFFST - CURR_WIND_WIDTH)) || \
              newXPos=$((CURR_WIND_X_POS - RGHT_MNTR_OFFST))

          wmctrl -i -r "${windId}" -b remove,maximized_vert,maximized_horz
          geom="${newXPos},${CURR_WIND_Y_POS},${CURR_WIND_WIDTH},"
          geom+="${CURR_WIND_HEIGHT}"
          wmctrl -i -r "${windId}" -e "0,${geom}"
        fi
      fi
      ;;
    'move-screen-right')
      if rightmonitor; then
        setCurrentWindowProperties "${windId}"
        if [[ "${CURR_WIND_X_POS}" -lt "${RGHT_MNTR_OFFST}" ]]; then
          newXPos=$((CURR_WIND_X_POS + RGHT_MNTR_OFFST))
          newXPosEnd=$((newXPos + CURR_WIND_WIDTH))
          rightMntrEnd=$((RGHT_MNTR_OFFST + RGHT_MNTR_WIDTH))
          [ "${newXPosEnd}" -gt "${rightMntrEnd}" ] && \
              newXPos=$((rightMntrEnd - CURR_WIND_WIDTH)) || \

          wmctrl -i -r "${windId}" -b remove,maximized_vert,maximized_horz
          geom="${newXPos},${CURR_WIND_Y_POS},${CURR_WIND_WIDTH},"
          geom+="${CURR_WIND_HEIGHT}"
          wmctrl -i -r "${windId}" -e "0,${geom}"
        fi
      fi
      ;;
    'move-wrkspc-1')
      wmctrl -i -r "${windId}" -t 0
      ;;
    'move-wrkspc-2')
      wmctrl -i -r "${windId}" -t 1
      ;;
    'move-wrkspc-3')
      wmctrl -r "${windId}" -t 2
      ;;
    'move-wrkspc-4')
      wmctrl -i -r "${windId}" -t 3
      ;;
  esac
done
